// ****************************************************************************************************
// *   v1190aDecoder
// *   Alexis Fagot
// *   26/01/2015
// ****************************************************************************************************
#ifndef __LINUX
#define __LINUX
#endif

#include <iostream>
#include <cstdlib>
#include <fstream>
#include <ostream>
#include <sstream>
#include <cmath>
#include <vector>
#include <string>
#include <iomanip>
#include <map>

#include <errno.h>
#include <fcntl.h>
#include <signal.h>
#include <sys/io.h>
#include <sys/timeb.h>
#include <sys/types.h>
#include <time.h>
#include <unistd.h>

#include "CAENVMElib.h"
#include "CAENVMEoslib.h"
#include "CAENVMEtypes.h"

#include "v1190aDecoder.h"

using namespace std;


v1190aDecoder::v1190aDecoder():Data(0){

}

// *************************************************************************************************************

v1190aDecoder::v1190aDecoder( Data32 data ){
    SetData(data);
}

v1190aDecoder::~v1190aDecoder(){

}

// *************************************************************************************************************

Data32 v1190aDecoder::GetDataType(){
    return ( ((Data) >> 0x1B ) & 0x1F );
}

// *************************************************************************************************************

bool v1190aDecoder::IsMeasurement(){
    V1190DataType type = static_cast< V1190DataType >( GetDataType() );
    return ( type == V1190A_Measurement );
}

// *************************************************************************************************************

bool v1190aDecoder::IsTdcHeader(){
    V1190DataType type = static_cast< V1190DataType >( GetDataType() );
    return ( type == V1190A_TdcHeader );
}

// *************************************************************************************************************

Data32 v1190aDecoder::GetChannel(){
    return Channel;
}

// *************************************************************************************************************

Data32 v1190aDecoder::GetMeasurement(){
    return Measurement;
}

// *************************************************************************************************************

Data16 v1190aDecoder::GetTdc(){
    return Tdc;
}

// *************************************************************************************************************

void v1190aDecoder::Decode(){
    Data32 Type = GetDataType();
    switch( Type ){
        case static_cast< Data32 >( V1190A_Measurement ) :
            this->_DecodeDatum();
            //cout << "Channel: " << Channel << " Data: " << Measurement << endl;
            break;

        case static_cast< Data32>( V1190A_GlobalHeader) :
            this->_DecodeGlobalHeader();
            //cout << "Events count: " << EventCount << " Geo: " << Geo << endl;
            break;

        case static_cast< Data32>( V1190A_GlobalTrailer ) :
            this->_DecodeGlobalTrailer();
            //cout << "Words count: " << WordCount << " Geo: " << Geo << endl;
            break;

        case static_cast< Data32>( V1190A_TdcTrailer ) :
            this->_DecodeTdcTrailer();
            //cout << "Words count: " << WordCount << " Tdc: " << _tdc << " Event Id: " << EventId << endl;
            break;

        case static_cast< Data32>( V1190A_TdcHeader ) :
            this->_DecodeTdcHeader();
            //cout << "Bunch Id: " << BunchId << " Tdc: " << _tdc << " Event Id: " << EventId << endl;
            break;

        default :
            //cerr << "Uknown type " << hex << Type << dec << endl;
            break;
    }
}

// *************************************************************************************************************

void v1190aDecoder::SetData( Data32 data ){
    Data = data;
}

// *************************************************************************************************************

void v1190aDecoder::_DecodeDatum(){
    if( GetDataType() == V1190A_Measurement ){
        Measurement = ( Data & 0x7FFFF );
        Channel = ( (Data  >> 0x13) & 0x1F );
    }
}

// *************************************************************************************************************

void v1190aDecoder::_DecodeGlobalHeader(){
    if( GetDataType() == V1190A_GlobalHeader ){
        EventCount = ( ( Data >> 0x05 ) & 0x3FFFFF );
        Geo = ( Data & 0x1F );
    }
}

// *************************************************************************************************************

void v1190aDecoder::_DecodeGlobalTrailer(){
    if( GetDataType() == V1190A_GlobalTrailer ){
        WordCount = ( ( Data >> 0x05 ) & 0xFFFF );
        Geo = ( Data & 0x1F );
    }
}

// *************************************************************************************************************

void v1190aDecoder::_DecodeTdcTrailer(){
    if( GetDataType() == V1190A_TdcTrailer ){
        Tdc = ( ( Data >> 0x18 ) & 0x03 );
        EventId = ( ( Data >> 0x0C ) & 0x0FFF );
        WordCount = ( Data & 0x0FFF );
    }
}

// *************************************************************************************************************

void v1190aDecoder::_DecodeTdcHeader(){
    if( GetDataType() == V1190A_TdcHeader ){
        Tdc = ( ( Data >> 0x18 ) & 0x03 );
        EventId = ( ( Data >> 0x0C ) & 0x0FFF );
        BunchId = ( Data & 0x0FFF );
    }
}
